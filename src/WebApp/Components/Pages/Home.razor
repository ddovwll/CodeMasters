@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/"
@using Core.Contracts
@using Core.Models
@inject NavigationManager Navigation
@inject IAuthorService AuthorService


<PageTitle>Контент Мастер</PageTitle>



<body>

<h2>Списки авторов</h2>

<div class="list-container">
    <!-- Первый список -->
    <div class="scrollable-list">
        <h3>Профили авторов</h3>
        <ul>
            @if (!authorsLoaded)
            {
                <li>Загрузка авторов</li>
            }
            else if (authors == null || !authors.Any())
            {
                <li>Список авторов пуст</li>
            }
            @if (authorsLoaded)
                foreach (var author in authors)
                {
                    var auth = author;
                    <li class="qwe" @onclick="() => ToArticle(auth)">@auth.Name</li>
                }
        </ul>
    </div>

    <!-- Второй список -->
    <div class="scrollable-list">
        <h3>Известные личности</h3>
        <ul>
            @if (famous != null && famous.Any())
            {
                foreach (var fame in famous)
                {
                    <li class="qwe" @onclick="() => ToArticle(fame)">@fame.Name</li>
                }
            }
        </ul>
    </div>
</div>

<!-- Контейнер для кнопок -->
<div class="buttons-container">
    <button class="btn" @onclick="ToNews">
        Новости
    </button>
    <button class="btn" @onclick="ToAddAuthor">Добавить автора</button>
    <button class="btn" @onclick="ToSavedArticles">Читать статьи</button>
</div>
</body>

@code
{
    int skip = 0;
    int take = 1000;
    bool authorsLoaded = false;
    List<AuthorModel> authors;
    List<AuthorModel> famous;

    /// <summary>
    /// Инициализация начального экрана
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        authors = await AuthorService.GetAuthorsAsync(skip, take);
        famous = await AuthorService.GetFamousAuthor();
        authorsLoaded = true;
    }

    /// <summary>
    /// Обработчик кнопки "К новостям"
    /// </summary>
    void ToNews()
    {
        Navigation.NavigateTo("/News", forceLoad: true);
    }

    /// <summary>
    /// Обработчик кнопки "Добавить автора"
    /// </summary>
    void ToAddAuthor()
    {
        Navigation.NavigateTo("/addauthor", forceLoad: true);
    }

    /// <summary>
    /// Обработчик кнопки "Сгенерировать статью"
    /// </summary>
    /// <param name="author">Модель автора</param>
    void ToArticle(AuthorModel author)
    {
        Navigation.NavigateTo($"/article/{author.Id}");
    }
    
    /// <summary>
    /// Обработчик кнопки "Читать статьи"
    /// </summary>
    void ToSavedArticles()
    {
        Navigation.NavigateTo($"/savedarticles");
    }
}

<style>
    /* Основные стили для страницы */
    body {
        background-color: #121212; /* Темный фон */
        color: #e0e0e0; /* Светлый текст */
        font-family: 'Poppins', sans-serif; /* Шрифт */
        margin: 0;
        padding: 20px; /* Общие отступы вокруг страницы */
    }

    /* Контейнер для списков авторов */
    .list-container {
        display: flex; /* Используем флекс для размещения списков */
        max-width: 1200px; /* Максимальная ширина контейнера */
        margin: 0 auto; /* Центрирование контейнера */
        gap: 20px; /* Промежуток между списками */
    }

    /* Стили для скроллируемых списков */
    .scrollable-list {
        flex: 1; /* Каждый список занимает равное пространство */
        padding: 20px; /* Отступы внутри списка */
        border-radius: 8px; /* Скругление углов */
        background-color: #1e1e1e; /* Темный фон для списков */
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5); /* Тень для списка */
        overflow-y: auto; /* Включаем вертикальный скроллинг */
        max-height: 300px; /* Ограничиваем высоту для скроллируемых списков */
    }

    /* Заголовки в списках */
    .scrollable-list h3 {
        margin-bottom: 15px; /* Отступы снизу для заголовков */
        color: #ffc107; /* Желтый цвет заголовков */
        font-weight: 600; /* Жирный текст */
    }

    /* Стили для элементов списка */
    .scrollable-list ul {
        list-style-type: none; /* Убираем маркеры */
        padding: 0; /* Убираем отступы */
        margin: 0; /* Убираем отступы */
    }

    .scrollable-list li {
        padding: 10px; /* Отступы внутри элементов списка */
        border-bottom: 1px solid #444; /* Разделитель между элементами списка */
        color: #d0d0d0; /* Светлый текст для элементов списка */
        cursor: pointer; /* Указатель при наведении */
        transition: background-color 0.3s; /* Плавный переход */
    }

    .scrollable-list li:hover {
        background-color: #3a3a3a; /* Подсветка при наведении */
    }

    .scrollable-list li:last-child {
        border-bottom: none; /* Убираем разделитель для последнего элемента */
    }

    /* Контейнер для кнопок */
    .buttons-container {
        display: flex; /* Используем флекс для размещения кнопок */
        justify-content: space-around; /* Равномерное распределение кнопок */
        margin-top: 20px; /* Отступ сверху */
    }

    /* Стили для кнопок */
    .btn {
        padding: 10px 20px; /* Отступы внутри кнопок */
        border: none; /* Убираем рамку */
        border-radius: 5px; /* Скругление углов */
        background-color: #4caf50; /* Зеленый цвет фона */
        color: white; /* Цвет текста */
        cursor: pointer; /* Указатель при наведении */
        font-family: 'Poppins', sans-serif; /* Шрифт для кнопок */
        font-weight: 600; /* Жирный текст */
        transition: background-color 0.3s, transform 0.3s; /* Плавный переход */
    }

    .btn:hover {
        background-color: #45a049; /* Темнее при наведении */
    }

</style>